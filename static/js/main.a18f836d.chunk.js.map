{"version":3,"sources":["components/form.js","App.js","serviceWorker.js","index.js"],"names":["generateRota","reviewers","rota","reviewers_shuffled","sort","Math","random","len","length","index","console","log","ReviewerTable","props","Table","striped","bordered","hover","ReviewerTableHeader","Object","keys","map","k","ReviewerTableRow","key","name","colSpan","ReviewerForm","useState","names","setNames","setRota","Container","className","Form","Group","as","Row","controlId","Col","sm","Label","Control","type","placeholder","onChange","e","target","value","Button","variant","onClick","evt","preventDefault","split","x","trim","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAQA,SAASA,EAAaC,GAWlB,IAHA,IAAIC,EAAO,GACLC,EAA6BF,EAarBG,MAAK,kBAAMC,KAAKC,SAAW,MAZnCC,EAAMJ,EAAmBK,OACtBC,EAAQ,EAAGA,EAAQF,EAAKE,IAC7BP,EAAKC,EAAmBM,IAAU,CAC9BN,GAAoBM,EAAQ,EAAIF,GAAOA,GACvCJ,GAAoBM,EAAQ,EAAIF,GAAOA,IAI/C,OADAG,QAAQC,IAAIT,GACLA,EAOX,SAASU,EAAcC,GACnB,OACI,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,kBAACC,EAAD,CAAqBhB,KAAMW,EAAMX,QAErC,+BAEQiB,OAAOC,KAAKP,EAAMX,MAAME,OAAOiB,KAAI,SAAAC,GAAC,OAChC,kBAACC,EAAD,CAAkBC,IAAKF,EAAGG,KAAMH,EAAGrB,UAAWY,EAAMX,KAAKoB,UAQjF,SAASJ,EAAoBL,GACzB,OAAIM,OAAOC,KAAKP,EAAMX,MAAMM,OAAS,EAE7B,4BACI,oCACA,wBAAIkB,QAAQ,KAAZ,cAID,qCAIf,SAASH,EAAiBV,GACtB,OACI,4BACI,4BAAKA,EAAMY,MACX,4BAAKZ,EAAMZ,UAAU,IACrB,4BAAKY,EAAMZ,UAAU,KAKlB,SAAS0B,EAAad,GAAQ,IAAD,EACde,mBAAS,IADK,mBACjCC,EADiC,KAC1BC,EAD0B,OAEhBF,mBAAS,IAFO,mBAEjC1B,EAFiC,KAE3B6B,EAF2B,KAUxC,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,OACjB,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,kBAC3B,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACN,EAAA,EAAKO,MAAN,qBAEJ,kBAACF,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACN,EAAA,EAAKQ,QAAN,CACIC,KAAK,OACLC,YAAY,sFACZC,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOC,WAGzC,kBAACT,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACS,EAAA,EAAD,CACIC,QAAQ,UACRC,QAxBH,SAACC,GAClBA,EAAIC,iBACJ3C,QAAQC,IAAR,qBAA0BkB,IAC1B,IAAM5B,EAAY4B,EAAMyB,MAAM,KAAKjC,KAAI,SAAAkC,GAAC,OAAIA,EAAEC,UAC9CzB,EAAQ/B,EAAaC,MAkBL,gBASZ,kBAACW,EAAD,CAAeV,KAAMA,KC7FlBuD,MAVf,WACE,OACE,oCACE,yBAAKxB,UAAU,OACX,kBAACN,EAAD,SCIU+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a18f836d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport Container from 'react-bootstrap/Container'\n\nfunction generateRota(reviewers) {\n    /*given n reviewers, where n > 2 eg. A, B, C, D\n      generate rota using neighbour algo, eg:\n      A: B, D\n      B: A, C\n      C: B, D\n      D: C, A\n    */\n    var rota = {}\n    const reviewers_shuffled = shuffle(reviewers)\n    const len = reviewers_shuffled.length\n    for (var index = 0; index < len; index++) {\n        rota[reviewers_shuffled[index]] = [\n            reviewers_shuffled[(index - 1 + len) % len] ,\n            reviewers_shuffled[(index + 1 + len) % len],\n        ]\n    }\n    console.log(rota)\n    return rota\n}\n\nfunction shuffle(arrays) {\n    return arrays.sort(() => Math.random() - 0.5)\n}\n\nfunction ReviewerTable(props) {\n    return (\n        <Table striped bordered hover>\n            <thead>\n                <ReviewerTableHeader rota={props.rota} />\n            </thead>\n            <tbody>\n                {\n                    Object.keys(props.rota).sort().map(k =>\n                        <ReviewerTableRow key={k} name={k} reviewers={props.rota[k]} />\n                    )\n                }\n            </tbody>\n        </Table>\n    )\n}\n\nfunction ReviewerTableHeader(props) {\n    if (Object.keys(props.rota).length > 0) {\n        return (\n            <tr>\n                <th>Name</th>\n                <th colSpan=\"2\">Reviewers</th>\n            </tr>\n        )\n    } else {\n        return <></>\n    }\n}\n\nfunction ReviewerTableRow(props) {\n    return (\n        <tr>\n            <td>{props.name}</td>\n            <td>{props.reviewers[0]}</td>\n            <td>{props.reviewers[1]}</td>\n        </tr>\n    )\n}\n\nexport default function ReviewerForm(props) {\n    const [names, setNames] = useState(\"\")\n    const [rota, setRota] = useState({})\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        console.log(`reviewers: ${names}`)\n        const reviewers = names.split(\",\").map(x => x.trim())\n        setRota(generateRota(reviewers))\n    }\n\n    return (\n        <Container className=\"p-3\">\n            <Form>\n                <Form.Group as={Row} controlId=\"reviewersInput\">\n                    <Col sm=\"2\">\n                        <Form.Label>Reviewers: </Form.Label>\n                    </Col>\n                    <Col sm=\"8\">\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"comma seperated list of reviewers, eg. Daniele, Ioan, Cyrus, Zacharo, Neil, Johanna\"\n                            onChange={e => setNames(e.target.value)}\n                        />\n                    </Col>\n                    <Col sm=\"2\">\n                        <Button\n                            variant=\"primary\"\n                            onClick={handleSubmit}>\n                            Get Rota!\n                        </Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n\n            <ReviewerTable rota={rota} />\n        </Container>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport ReviewerForm from './components/form'\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n          <ReviewerForm />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}